name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    strategy:
      matrix:
        go-version: ["1.23", "1.24"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -short -coverprofile=coverage.txt -covermode=atomic \
            $(go list ./... | grep -v /tests/)

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run coverage
        run: |
          go test -race -short -coverprofile=coverage.txt -covermode=atomic \
            $(go list ./... | grep -v /tests/)
          go tool cover -func=coverage.txt

      # - name: Check coverage threshold
      #   run: |
      #     COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
      #     echo "Coverage: $COVERAGE%"
      #     if (( $(echo "$COVERAGE < 70" | bc -l) )); then
      #       echo "Coverage is below 70%"
      #       exit 1
      #     fi

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run gofmt
        run: |
          gofmt -l -w .
          git diff --exit-code

      - name: Run go vet
        run: go vet ./...

  integration-api-test:
    name: Integration and API Tests
    runs-on: ubuntu-latest
    # Only run if secrets are available (not on forks)
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Set up Google Sheets credentials
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
        run: |
          echo "$SERVICE_ACCOUNT_JSON" > ./service-account.json
          chmod 600 ./service-account.json

      - name: Run integration tests
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./service-account.json
          TEST_CLIENT_EMAIL: ${{ secrets.TEST_CLIENT_EMAIL }}
          TEST_CLIENT_PRIVATE_KEY: ${{ secrets.TEST_CLIENT_PRIVATE_KEY }}
          TEST_GOOGLE_SHEET_ID: ${{ secrets.TEST_GOOGLE_SHEET_ID }}
        run: go test -v -race -timeout 10m ./tests/integration

      - name: Run API tests
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./service-account.json
          TEST_CLIENT_EMAIL: ${{ secrets.TEST_CLIENT_EMAIL }}
          TEST_CLIENT_PRIVATE_KEY: ${{ secrets.TEST_CLIENT_PRIVATE_KEY }}
          TEST_GOOGLE_SHEET_ID: ${{ secrets.TEST_GOOGLE_SHEET_ID }}
        run: go test -v -race -timeout 10m ./tests/api

      - name: Clean up credentials
        if: always()
        run: rm -f ./service-account.json
